import net.researchgate.release.GitAdapter

plugins {
    id 'net.researchgate.release' version '2.8.1'

    // 1.8.20 due to compatibility with kotlinx-dataframe and ksp
    id 'org.jetbrains.kotlin.jvm' version '1.8.20'

//    // Optional Gradle plugin for enhanced type safety and schema generation
//    // https://kotlin.github.io/dataframe/gradle.html
    id 'org.jetbrains.kotlinx.dataframe' version '0.11.1'

    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
}

group 'org.graphomance'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"
    implementation group: 'io.dropwizard.metrics', name: 'metrics-core', version: '3.2.6'
    implementation group: 'commons-cli', name: 'commons-cli', version: '1.4'
    implementation group: 'org.neo4j.driver', name: 'neo4j-java-driver', version: neo4jVersion
    implementation group: 'com.arangodb', name: 'arangodb-java-driver', version: arangoApiVersion
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'org.assertj:assertj-core:3.11.1'
    implementation 'org.reflections:reflections:0.10.2'
    implementation ('com.github.javafaker:javafaker:1.0.2')  { exclude module: 'snakeyaml' }
    implementation 'org.yaml:snakeyaml:2.2' // solves CVE errors in javafaker dependencies
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.5' // required to serialize LocalDate with ArangoDB driver
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:2.15.1"
    implementation 'org.jetbrains.kotlinx:dataframe:0.11.1'
    implementation 'org.jetbrains.lets-plot:lets-plot-kotlin-jvm:4.4.2'

    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.9.2'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

release {
    scmAdapters = [GitAdapter]
    preTagCommitMessage = 'Pre tag: '
    tagCommitMessage = 'Creating tag: '
    newVersionCommitMessage = 'New version: '
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

task combineResults(type: JavaExec) {
    dependsOn compileKotlin
    group = "Execution"
    description = "Combining test results"
    classpath = sourceSets.main.runtimeClasspath
    main = "org.graphomance.reporting.ChartsGeneratorKt"
}